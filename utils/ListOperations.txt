1. Reversing a List (inplace reversing)
    numbers.reverse()

2. Slicing

    you have to give startIndex, endIndex
    sublist = numbers[1:4]  # Returns a sublist from index 1 to index 3
    print(sublist)

    You can also use slicing to reverse the list:
    reversed_list = numbers[::-1]

    1. Insert using slicing

        numbers = [1, 2, 3, 4, 5]
        new_elements = [99, 100]

        # Insert at index 2
        numbers[2:2] = new_elements
        print(numbers) # [1, 2, 99, 100, 3, 4, 5]
    2. Delete using slicing

        numbers = [1, 2, 3, 4, 5]

        # Delete elements from index 1 to 3 (exclusive of index 3)
        numbers[1:3] = []
        print(numbers) # [1, 4, 5]

    3. Replace using slicing

        numbers = [1, 2, 3, 4, 5]
        replacement = [99, 100]

        # Replace elements from index 1 to 3 (exclusive of index 3)
        numbers[1:3] = replacement
        print(numbers) # [1, 99, 100, 4, 5]

3. slicing with step
    Slicing Syntax:
    list[start:stop:step]

    Where:

        start is the index where the slice starts (inclusive).
        stop is the index where the slice ends (exclusive).
        step is the interval between elements. A positive step moves forward, while a negative step moves backward.

    numbers[::-1] Explained: (reverse of a list)

        start and stop are omitted, which means it will consider the entire list.
        step is -1, meaning it moves through the list backward.

    find elements at odd places:
    ---------------------------

    To extract elements at odd positions (indices 1, 3, 5, etc.) from a list in Python, you can use slicing with a step of 2. The syntax would be:
    odd_position_elements = numbers[1::2]  # Starts at index 1 (second element) and steps by 2

6. List Multiplication
    repeated_list = numbers * 2  # Repeat the list twice

7. Finding the Minimum, Maximum, and Sum
    print(min(numbers), max(numbers), sum(numbers))

8. Enumerating a List

    instead of Enumerating, you can use for i in range(0, len(arr)) also. but enumerate gives cleaner code.
    Enumerate gives you both the index and the value while iterating through a list:

    for index, value in enumerate(numbers):
        print(index, value")

12. Finding the Length of a List
    length = len(numbers)  # Get the number of elements in the list

17. Convert other data structures to a list:
    tuple_example = (1, 2, 3)
    list_from_tuple = list(tuple_example)  # Convert tuple to list
