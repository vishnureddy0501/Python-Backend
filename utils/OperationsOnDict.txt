# Dictionary is nothing but object
customer = {
    "name": "vishnu",
    "age": 30,
    'isVerified': True
}
customer['name'] = "sneha"
# get method is used for safely accessing. just like chainng in javascript
print(customer, customer['name'], customer.get('birthDate'))
print(customer.get('birthDate', 'Default Value if birthDate not present'))

1. Creating a Dictionary

my_dict = {"name": "Alice", "age": 25, "city": "New York"}

2. Accessing Values

print(my_dict["name"])  # Output: Alice

3. Adding or Updating Key-Value Pairs

my_dict["email"] = "alice@example.com"  # Adding a new key-value pair
my_dict["age"] = 26  # Updating an existing key

4. Removing Elements
    my_dict.pop("age")  # Removes 'age' and returns 26

    clear(): Removes all elements from the dictionary.
    my_dict.clear()  # The dictionary becomes empty

5. Checking if a Key Exists

if "name" in my_dict:
    print("Name exists")

6. Iterating Over a Dictionary

for key in my_dict:
    print(key)

for value in my_dict.values():
    print(value)

for key, value in my_dict.items():
    print(key, value)

7. Merging Dictionaries

    update(): Merges another dictionary into the current dictionary.

    my_dict.update({"phone": "123-456-7890", "city": "Boston"})

9. Getting a Value Safely

You can use the get() method to safely retrieve values, providing a default if the key is not found.

print(my_dict.get("name", "Unknown"))  # Output: Alice
print(my_dict.get("address", "Not Available"))  # Output: Not Available

10. Copying a Dictionary

To copy a dictionary (shallow copy):
    new_dict = my_dict.copy()

Deep copy:

    import copy
    my_dict = {"a": 1, "b": [2, 3]}
    new_dict = copy.deepcopy(my_dict)

    new_dict["b"].append(4)  # Only changes in new_dict

    print(my_dict)  # {'a': 1, 'b': [2, 3]}
    print(new_dict) # {'a': 1, 'b': [2, 3, 4]}

11. Length of a Dictionary

You can find the number of key-value pairs using len().

print(len(my_dict))  # Output: 2 (after previous removals)